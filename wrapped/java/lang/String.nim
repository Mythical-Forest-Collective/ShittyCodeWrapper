# Imports
import wrapped/java/util/Comparator
import wrapped/java/lang/Class
import wrapped/java/util/Optional
import wrapped/java/lang/CharSequence
import wrapped/java/util/stream/IntStream
import wrapped/java/lang/Object
import wrapped/java/util/stream/Stream

# Class/Object wrapping
type String = object
  variableName*:string

template classLocation*(obj:typedesc[String]):string = "java.lang.String"

# Methods
template equals*(obj:String):string = obj.variableName & ".equals"
template length*(obj:String):string = obj.variableName & ".length"
template toString*(obj:String):string = obj.variableName & ".toString"
template hashCode*(obj:String):string = obj.variableName & ".hashCode"
template getChars*(obj:String):string = obj.variableName & ".getChars"
template compareTo*(obj:String):string = obj.variableName & ".compareTo"
template compareTo*(obj:String):string = obj.variableName & ".compareTo"
template indexOf*(obj:String):string = obj.variableName & ".indexOf"
template indexOf*(obj:String):string = obj.variableName & ".indexOf"
template indexOf*(obj:String):string = obj.variableName & ".indexOf"
template indexOf*(obj:String):string = obj.variableName & ".indexOf"
template valueOf*(obj:typedesc[String]):string = "valueOf"
template valueOf*(obj:typedesc[String]):string = "valueOf"
template valueOf*(obj:typedesc[String]):string = "valueOf"
template valueOf*(obj:typedesc[String]):string = "valueOf"
template valueOf*(obj:typedesc[String]):string = "valueOf"
template valueOf*(obj:typedesc[String]):string = "valueOf"
template valueOf*(obj:typedesc[String]):string = "valueOf"
template valueOf*(obj:typedesc[String]):string = "valueOf"
template valueOf*(obj:typedesc[String]):string = "valueOf"
template charAt*(obj:String):string = obj.variableName & ".charAt"
template codePointAt*(obj:String):string = obj.variableName & ".codePointAt"
template codePointBefore*(obj:String):string = obj.variableName & ".codePointBefore"
template codePointCount*(obj:String):string = obj.variableName & ".codePointCount"
template offsetByCodePoints*(obj:String):string = obj.variableName & ".offsetByCodePoints"
template getBytes*(obj:String):string = obj.variableName & ".getBytes"
template getBytes*(obj:String):string = obj.variableName & ".getBytes"
template getBytes*(obj:String):string = obj.variableName & ".getBytes"
template getBytes*(obj:String):string = obj.variableName & ".getBytes"
template contentEquals*(obj:String):string = obj.variableName & ".contentEquals"
template contentEquals*(obj:String):string = obj.variableName & ".contentEquals"
template regionMatches*(obj:String):string = obj.variableName & ".regionMatches"
template regionMatches*(obj:String):string = obj.variableName & ".regionMatches"
template startsWith*(obj:String):string = obj.variableName & ".startsWith"
template startsWith*(obj:String):string = obj.variableName & ".startsWith"
template lastIndexOf*(obj:String):string = obj.variableName & ".lastIndexOf"
template lastIndexOf*(obj:String):string = obj.variableName & ".lastIndexOf"
template lastIndexOf*(obj:String):string = obj.variableName & ".lastIndexOf"
template lastIndexOf*(obj:String):string = obj.variableName & ".lastIndexOf"
template substring*(obj:String):string = obj.variableName & ".substring"
template substring*(obj:String):string = obj.variableName & ".substring"
template isEmpty*(obj:String):string = obj.variableName & ".isEmpty"
template replace*(obj:String):string = obj.variableName & ".replace"
template replace*(obj:String):string = obj.variableName & ".replace"
template matches*(obj:String):string = obj.variableName & ".matches"
template replaceFirst*(obj:String):string = obj.variableName & ".replaceFirst"
template replaceAll*(obj:String):string = obj.variableName & ".replaceAll"
template split*(obj:String):string = obj.variableName & ".split"
template split*(obj:String):string = obj.variableName & ".split"
template join*(obj:typedesc[String]):string = "join"
template join*(obj:typedesc[String]):string = "join"
template toLowerCase*(obj:String):string = obj.variableName & ".toLowerCase"
template toLowerCase*(obj:String):string = obj.variableName & ".toLowerCase"
template toUpperCase*(obj:String):string = obj.variableName & ".toUpperCase"
template toUpperCase*(obj:String):string = obj.variableName & ".toUpperCase"
template trim*(obj:String):string = obj.variableName & ".trim"
template strip*(obj:String):string = obj.variableName & ".strip"
template stripLeading*(obj:String):string = obj.variableName & ".stripLeading"
template stripTrailing*(obj:String):string = obj.variableName & ".stripTrailing"
template lines*(obj:String):string = obj.variableName & ".lines"
template repeat*(obj:String):string = obj.variableName & ".repeat"
template isBlank*(obj:String):string = obj.variableName & ".isBlank"
template toCharArray*(obj:String):string = obj.variableName & ".toCharArray"
template format*(obj:typedesc[String]):string = "format"
template format*(obj:typedesc[String]):string = "format"
template resolveConstantDesc*(obj:String):string = obj.variableName & ".resolveConstantDesc"
template resolveConstantDesc*(obj:String):string = obj.variableName & ".resolveConstantDesc"
template codePoints*(obj:String):string = obj.variableName & ".codePoints"
template equalsIgnoreCase*(obj:String):string = obj.variableName & ".equalsIgnoreCase"
template compareToIgnoreCase*(obj:String):string = obj.variableName & ".compareToIgnoreCase"
template endsWith*(obj:String):string = obj.variableName & ".endsWith"
template subSequence*(obj:String):string = obj.variableName & ".subSequence"
template concat*(obj:String):string = obj.variableName & ".concat"
template contains*(obj:String):string = obj.variableName & ".contains"
template indent*(obj:String):string = obj.variableName & ".indent"
template stripIndent*(obj:String):string = obj.variableName & ".stripIndent"
template translateEscapes*(obj:String):string = obj.variableName & ".translateEscapes"
template chars*(obj:String):string = obj.variableName & ".chars"
template transform*(obj:String):string = obj.variableName & ".transform"
template formatted*(obj:String):string = obj.variableName & ".formatted"
template copyValueOf*(obj:typedesc[String]):string = "copyValueOf"
template copyValueOf*(obj:typedesc[String]):string = "copyValueOf"
template intern*(obj:String):string = obj.variableName & ".intern"
template describeConstable*(obj:String):string = obj.variableName & ".describeConstable"
template wait*(obj:String):string = obj.variableName & ".wait"
template wait*(obj:String):string = obj.variableName & ".wait"
template wait*(obj:String):string = obj.variableName & ".wait"
template getClass*(obj:String):string = obj.variableName & ".getClass"
template notify*(obj:String):string = obj.variableName & ".notify"
template notifyAll*(obj:String):string = obj.variableName & ".notifyAll"

# Fields
template CASE_INSENSITIVE_ORDER*(obj:typedesc[String]):Comparator = "String.CASE_INSENSITIVE_ORDER"
